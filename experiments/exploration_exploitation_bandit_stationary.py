import numpy as np
import matplotlib.pyplot as plt


def epsilon_greedy_action(action_values: np.array, epsilon: float) -> int:
    if np.random.random() <= epsilon:
        return np.random.choice(10)
    else:
        return np.argmax(action_values)


def get_epsilons(epsilon, decay, steps):
    epsilons = []
    if decay:
        epsilon_delta = (epsilon - 0) / steps
        for i in range(steps):
            epsilon -= epsilon_delta
            epsilons.append(epsilon)
    return epsilons


def run_single_experiment(epsilon: float, decay=False):
    mu = np.random.normal(0, 1, 10)
    sigma = 1
    action_values = np.zeros(10)
    action_counts = np.zeros(10)
    steps = 1000
    epsilons = get_epsilons(epsilon, decay, steps)
    rewards = []
    for i in range(steps):
        epsilon = epsilons[i] if epsilons else epsilon
        selected_action = epsilon_greedy_action(action_values, epsilon)
        actual_reward = np.random.normal(mu[selected_action], sigma)
        action_counts[selected_action] += 1
        action_values[selected_action] += (
            actual_reward - action_values[selected_action]
        ) / float(action_counts[selected_action])
        rewards.append(action_values[selected_action])
    return rewards


def run_experiments(epsilon: float, decay=False):
    all_rewards = []
    for _ in range(2000):
        rewards = run_single_experiment(epsilon, decay=decay)
        all_rewards.append(rewards)
    all_rewards = np.array(all_rewards)
    return all_rewards.mean(axis=0)


def run_and_plot_results():
    epsilons = {
        0: {"color": "-g"},
        0.1: {"color": "-b"},
        0.01: {"color": "-r"},
        0.5: {"color": "-y"},
        0.2: {"color": "-k", "decay": True, "label": "0.2 with decay"},
    }
    for epsilon, props in epsilons.items():
        if props.get("decay"):
            rewards = run_experiments(epsilon, decay=True)
        else:
            rewards = run_experiments(epsilon)
        x = np.arange(1, len(rewards) + 1)
        plt.plot(x, rewards, props["color"], label=props.get("label", f"Îµ={epsilon}"))
    plt.legend()
    plt.show()


if __name__ == "__main__":
    run_and_plot_results()
