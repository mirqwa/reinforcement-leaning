import numpy as np
import matplotlib.pyplot as plt


def epsilon_greedy_action(action_values: np.array, epsilon: float) -> int:
    if np.random.random() <= epsilon:
        return np.random.choice(10)
    else:
        return np.argmax(action_values)


def run_single_experiment(epsilon: float, alpha=None):
    mu = np.random.normal(0, 1, 10)
    sigma = 1
    action_values = np.zeros(10)
    action_counts = np.zeros(10)
    steps = 500
    rewards = []
    for _ in range(steps):
        action_values += np.random.normal(0, 0.01, 10)
        selected_action = epsilon_greedy_action(action_values, epsilon)
        actual_reward = np.random.normal(mu[selected_action], sigma)
        action_counts[selected_action] += 1
        step_size = alpha if alpha else action_counts[selected_action]
        action_values[selected_action] += (
            actual_reward - action_values[selected_action]
        ) / step_size
        rewards.append(action_values[selected_action])
    return rewards


def run_experiments(epsilon: float, alpha=None):
    all_rewards = []
    for _ in range(2000):
        rewards = run_single_experiment(epsilon, alpha)
        all_rewards.append(rewards)
    all_rewards = np.array(all_rewards)
    return all_rewards.mean(axis=0)


def run_and_plot_results():
    epsilons = [
        {"epsilon": 0.1, "color": "-r"},
        {"epsilon": 0.1, "color": "-b", "alpha": 0.1, "label": f"ε=0.1, α=0.1"},
    ]
    for props in epsilons:
        rewards = run_experiments(props["epsilon"], alpha=props.get("alpha"))
        x = np.arange(1, len(rewards) + 1)
        plt.plot(x, rewards, props["color"], label=props.get("label", f"ε={props['epsilon']}"))
    plt.legend()
    plt.show()


if __name__ == "__main__":
    run_and_plot_results()
